<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Hugo tranquilpeak theme</title>
    <link>https://fenggolang.github.io/tags/golang/</link>
    <description>Recent content in Golang on Hugo tranquilpeak theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 06 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fenggolang.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang控制goroutine的几种方式比较</title>
      <link>https://fenggolang.github.io/2018/08/golang%E6%8E%A7%E5%88%B6goroutine%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fenggolang.github.io/2018/08/golang%E6%8E%A7%E5%88%B6goroutine%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</guid>
      <description>WaitGroup是一种控制并发的方式，它的这种方式是控制多个goroutine同时完成.一个很简单的例子，比如2个goroutine要同时都做完了，才算是完成，先做好的就要等着其他未完成的，所有的goroutine要都全部完成才可以.编程模式是wg.Add()-&amp;gt;wg.Done()-&amp;gt;wg.Wait()
另外一种是chan通知方式通知其他goroutine说我这个goroutine结束了，编程模式是select-&amp;gt;case &amp;lt;- chan
通过Context来通知，编程模式是select-&amp;gt;case &amp;lt;- ctx.Done() -&amp;gt; cancel()
Context控制多个goroutine,编程模式&amp;hellip;
package main import ( &amp;quot;time&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;context&amp;quot; ) func main() { //waitGroup() //chanSelect() //ContextSingleGoroutine() ContextMultiGoroutine() } // 使用WaitGroup来控制groutine func waitGroup(){ var wg sync.WaitGroup wg.Add(2) go func() { time.Sleep(2*time.Second) fmt.Println(&amp;quot;1号员工完成&amp;quot;) wg.Done() }() go func() { time.Sleep(2*time.Second) fmt.Println(&amp;quot;2号员工完成&amp;quot;) wg.Done() }() wg.Wait() fmt.Println(&amp;quot;好了，所有员工都做完了，收工&amp;quot;) } // 使用select case:chan来控制goroutine func chanSelect(){ stop:=make(chan bool) go func() { for { select { case&amp;lt;-stop: fmt.Println(&amp;quot;监控退出，停止了...&amp;quot;) return default: fmt.</description>
    </item>
    
  </channel>
</rss>