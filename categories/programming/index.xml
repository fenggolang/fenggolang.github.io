<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Hugo tranquilpeak theme</title>
    <link>https://fenggolang.github.io/categories/programming/</link>
    <description>Recent content in Programming on Hugo tranquilpeak theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fenggolang.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>谈谈golang中的interface</title>
      <link>https://fenggolang.github.io/2018/08/%E8%B0%88%E8%B0%88golang%E4%B8%AD%E7%9A%84interface/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fenggolang.github.io/2018/08/%E8%B0%88%E8%B0%88golang%E4%B8%AD%E7%9A%84interface/</guid>
      <description>&lt;hr /&gt;

&lt;h4 id=&#34;前言&#34;&gt;前言&lt;/h4&gt;

&lt;p&gt;如果说goroutine和channel是Go并发的两大基石，那么接口是Go语言编程中数据类型的关键。在Go语言的实际编程中，几乎所有的数据结构都围绕接口展开，接口是Go语言中所有数据结构的核心。&lt;/p&gt;

&lt;p&gt;Go不是一种典型的OO语言，它在语法上不支持类和继承的概念。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang控制goroutine的几种方式比较</title>
      <link>https://fenggolang.github.io/2018/08/golang%E6%8E%A7%E5%88%B6goroutine%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fenggolang.github.io/2018/08/golang%E6%8E%A7%E5%88%B6goroutine%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</guid>
      <description>&lt;p&gt;WaitGroup是一种控制并发的方式，它的这种方式是控制多个goroutine同时完成.一个很简单的例子，比如2个goroutine要同时都做完了，才算是完成，先做好的就要等着其他未完成的，所有的goroutine要都全部完成才可以.编程模式是wg.Add()-&amp;gt;wg.Done()-&amp;gt;wg.Wait()&lt;/p&gt;

&lt;p&gt;另外一种是chan通知方式通知其他goroutine说我这个goroutine结束了，编程模式是select-&amp;gt;case &amp;lt;- chan&lt;/p&gt;

&lt;p&gt;通过Context来通知，编程模式是select-&amp;gt;case &amp;lt;- ctx.Done() -&amp;gt; cancel()&lt;/p&gt;

&lt;p&gt;Context控制多个goroutine,编程模式&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>